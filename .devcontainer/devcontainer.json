// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// README at: https://github.com/devcontainers/templates/tree/main/src/rust
{
  "name": "Rust",
  // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile
  "image": "mcr.microsoft.com/devcontainers/rust:bookworm",

  // Use `mounts` to make the cargo cache persistent in a Docker Volume.
  // "mounts": [
  // 	{
  // 		"source": "devcontainer-cargo-cache-${devcontainerId}",
  // 		"target": "/usr/local/cargo",
  // 		"type": "volume"
  // 	}
  // ]

  // Features to add to the dev container. More info: https://containers.dev/features.
  "features": {},

  // Configure tool-specific properties.
  "customizations": {
    // Configure properties specific to VS Code.
    "vscode": {
      "extensions": [
        "davidanson.vscode-markdownlint",
        "esbenp.prettier-vscode",
        "docsmsft.docs-authoring-pack",
        "github.copilot",
        "github.copilot-chat",
        "github.vscode-pull-request-github",
        "rust-lang.rust-analyzer",
        "serayuzgur.crates",
        "streetsidesoftware.code-spell-checker",
        "tamasfe.even-better-toml"
      ]
    }
  },

  // Use `forwardPorts` to make a list of ports inside the container available locally.
  "forwardPorts": [],

  // Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.
  // "remoteUser": "root",

  // Use `initializeCommand` to run commands on the **host** machine before
  // the container is created. (**Note:** Do not try to access `${containerEnv}`
  // variables until after the `initializeCommand` event.)
  // "initializeCommand": "echo @initializeCommand, devcontainerId: ${devcontainerId}, local, user: ${localEnv:USER}${localEnv:USERNAME}, workspace: ${localWorkspaceFolder}, container, workspace: ${containerWorkspaceFolder}",

  // Use `onCreateCommand` to run commands **inside** the container after
  // it has started for the first time.
  // "onCreateCommand": "echo @onCreateCommand, devcontainerId: ${devcontainerId}, local, user: ${localEnv:USER}${localEnv:USERNAME}, workspace: ${localWorkspaceFolder}, container, user: ${containerEnv:USER:'<undefined>'}, workspace: ${containerWorkspaceFolder}",

  // Use `updateContentCommand` to run commands **inside** the container
  // after `onCreateCommand`, whenever new content is available in the source
  // tree during the creation process.
  // "updateContentCommand": "echo @updateContentCommand, devcontainerId: ${devcontainerId}, local, user: ${localEnv:USER}${localEnv:USERNAME}, workspace: ${localWorkspaceFolder}, container, user: ${containerEnv:USER:'<undefined>'}, workspace: ${containerWorkspaceFolder}",

  // Use `postCreateCommand` to run commands **inside** the container
  // after `updateContentCommand`, once the dev container has been assigned
  // to a user for the first time.
  // "postCreateCommand": "echo @postCreateCommand, devcontainerId: ${devcontainerId}, local, user: ${localEnv:USER}${localEnv:USERNAME}, workspace: ${localWorkspaceFolder}, container, user: ${containerEnv:USER:'<undefined>'}, workspace: ${containerWorkspaceFolder}, $(rustc --version)",

  // Use `postStartCommand` to run commands **inside** the container each time
  // it is successfully started.
  "postStartCommand": "git config --global --add safe.directory ${containerWorkspaceFolder}"

  // Use `postAttachCommand` to run commands **inside** the container each time
  // a tool has successfully attached to the container.
  // "postAttachCommand": "echo @postAttachCommand, devcontainerId: ${devcontainerId}, local, user: ${localEnv:USER}${localEnv:USERNAME}, workspace: ${localWorkspaceFolder}, container, user: ${containerEnv:USER:'<undefined>'}, workspace: ${containerWorkspaceFolder}"
}
